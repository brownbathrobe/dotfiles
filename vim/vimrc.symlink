set nocompatible
syntax enable
set encoding=utf-8

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" load all plugins
source $HOME/.vim/packages.vim
filetype plugin indent on

call togglebg#map("<F5>")

"shell
set shell=/bin/bash

" Some view/ux related stuff
set background=dark
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 3
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=lightgreen   ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=lightcyan ctermbg=10
colorscheme solarized
set ruler                       " show the cursor position all the time
set number                      " show line numbers
set cursorline                  " draw a line on the same as the cursor position
set mouse=a                     " enable mouse support
set showcmd                     " display incomplete commands
set title                       " set the screen title to the currently opened file
set gcr=n:blinkon0              " stop blinking cursors
set laststatus=2                " for powerline visiblity

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set undofile                    " Save undo's after file closes
set undodir=~/.vim/undo         " where to save undo histories

" This sends all yanks to the system clipboard (requires building vim with
" +clipboard support)
set clipboard=unnamed

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the first column when wrap is
                                  " off and the line continues beyond the left of the screen
"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set cc=80                       " set colorcolumn 80 to visualize 80th column

set wildmenu
set wildmode=list:longest,full

"" Get rid of the lag when leaving insert mode
set ttimeoutlen=20

" this is messing with the `build` directory in the CLI
" set wildignore+=*/build/*

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

if has("autocmd")
  " In Makefiles, use real tabs, not tabs expanded to spaces
  au FileType make set noexpandtab

  " Make sure all markdown files have the correct filetype set and setup wrapping
  au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  au FileType conf set ft=sh
  au BufRead,BufNewFile coffee setf coffee
  au BufRead,BufNewFile Jakefile setf javascript
  au BufNewFile,BufRead *.jst set ft=html
  au BufNewFile,BufRead *.template set ft=html
  au BufNewFile,BufRead *.recipe set ft=coffee
  au BufNewFile,BufRead *.scss set ft=scss.css

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json set ft=javascript

  " Freemarker
  au BufNewFile,BufRead *.ftl set filetype=html
  au BufNewFile,BufRead *.js.ftl set filetype=javascript
  au BufNewFile,BufRead *.html.ftl set filetype=html

  " make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
  au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" provide some context when editing
set scrolloff=3


"" Mappings
let mapleader=";"

" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Map space to / (search) and control-space to ? (backgwards search)
" map <space> /
" map ✧ ?

" clear the search buffer when hitting ;space
map <silent> <leader>/ :noh<cr>

" disable EX mode
map Q <Nop>

" Quickfix open
nnoremap <leader>qo :copen<CR>

" Quickfix close
nnoremap <leader>qc :ccl<CR>

" Ack
nnoremap <leader>a :Ack 

" Ack for the last search.
nnoremap <silent> <leader>qa/ :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" toggle last buffer
nnoremap <leader><leader> <c-^>

" Paste last yanked item, even after deleting.
noremap <Leader>p "0p
noremap <Leader>P "0P

" goto previous buffer, then delete previous buffer (close buffer, keep split)
nmap <leader>d :b#<bar>bd#<CR>

" SPLITS
" make splitting more sane
set splitbelow
set splitright
" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" equalize window split
nnoremap <c-]> <c-w>=
nnoremap <c-\> <c-w><bar>

" resize windows quickly using arrow keys
nnoremap <Right> :vertical resize +3<cr>
nnoremap <Left> :vertical resize -3<cr>
nnoremap <Up> :resize +3<cr>
nnoremap <Down> :resize -3<cr>

"" Plugin config

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" quit NERDTree after opening a file
let g:NERDTreeQuitOnOpen = 1
" load nerd-tree-tabs plugin on startup
let g:nerdtree_tabs_open_on_console_startup=1

" CoffeeTags 
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '--include-vars',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

nnoremap <leader>l :TagbarToggle<CR>
nnoremap <leader>i :silent!coffeetags -R \| sed '/\.\/build\//d' > tags<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>b :CtrlPBuffer<CR>

"coffee compile
vmap <leader>c <esc>:'<,'>:CoffeeCompile<CR>
map <leader>c :CoffeeCompile<CR>
"js2coffee
map <leader>JS :! Js2Coffee<CR>

function SaveSession()
  :echo 'saving session'
  :mksession! ~/.previous_session.ses
endfunction

" c:number to jump coffee/js
command -nargs=1 C CoffeeCompile | :<args>
command W :w
command Vs :vs
command Wq :wq
command SS :call SaveSession()
command SQ :call SaveSession() | :wqall


" AUTOCLOSE
nmap <unique> <Leader>AC <Plug>ToggleAutoCloseMappings
" turn off autoclose by default
let g:autoclose_on = 0

" CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
let g:ctrlp_dotfiles = 0 "so ctrlp won't search dotfiles/dotdirs
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_map = '<leader>f'
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_custom_ignore = 'build'
let g:ctrlp_regexp = 1

" Supertab
let g:SuperTabDefaultCompletionType = "context"
map ✠ o<Esc>
map ✦ O<Esc>j
map <leader>w :FixWhitespace<CR>
set cmdheight=1
let g:Powerline_symbols = 'fancy'

" Syntastic
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['scss', 'mustache', 'html'] }

map <leader>j :call ToggleJournal()<CR>
" Toggle Taskpaper Journal
let g:journal_open=0

function ToggleJournal()
  if g:journal_open
    :w
    let buffernumber = str2nr(bufnr('todo'))
    if buffernumber != -1
      :bd todo
      let g:journal_open=0
    endif
  else
    let cwd_journal_exists = filereadable("todo")
    if cwd_journal_exists
      echo 'open (l)ocal journal (in ' . getcwd() . '/) or (g)lobal journal: '
    else
      echo 'create (l)ocal journal (in ' . getcwd() . '/) or open (g)lobal journal: '
    endif
    let input = nr2char(getchar())
    if input == 'l'
      :split todo
      let g:journal_open=1
      if !cwd_journal_exists
        :execute 'normal ' . 'R' . getcwd() . '/'
        :execute 'normal ' . 'oTODOs:'
        :w
      endif
    elseif input == 'g'
      :split ~/Dropbox/appdata/todo/todo
      let g:journal_open=1
    endif
  endif
endfunction

" ShowMarks
let g:showmarks_enable=0

" Show currently matched syntax rule
map ,hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") .
      \ '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" .
      \ synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" .
      \ " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

" Override color of @ variables in CoffeeScript files
hi! link coffeeSpecialVar Function
" Override incremental search color
" hi! link Search Pl7587d7ff1f0087afN
hi! link Search DiffAdd
" hi! link Search Folded
" hi! link Search TabLineFill

" Create non-existent parent directories on filesave
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" MULTICURSOR
nnoremap <leader>dmc :<c-u>call MultiCursorSearch('<c-r><c-w>')<cr>
nnoremap <leader>dc :<c-u>call MultiCursorPlaceCursor()<cr>
nnoremap <leader>uc :<c-u>call MultiCursorManual()<cr>
nnoremap <leader>rc :<c-u>call MultiCursorRemoveCursors()<cr>
let g:multicursor_quit = "Q"

" mapping to open current md file with Marked
nnoremap <leader>md :!open -a "Marked.app" "%:p"<CR>

" insert single character
nnoremap I :<C-U>call InsertChar#insert(v:count1)<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
" map <leader>a :call RunTests('')<cr>
" map <leader>T :call RunNearestTest()<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(._spec.coffee\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if filereadable("bin/test")
      exec ":!bin/test " . a:filename
    else
        exec ":!node_modules/.bin/mocha " . a:filename
    end
endfunction
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
command! Rename :call RenameFile()<cr>

" open .vimrc
nmap <leader>v :tabnew ~/.vimrc <cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STARTIFY SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:exec ":source " . $HOME . '/.vim/ascii/uncle_d.vim'
let g:startify_custom_header = ascii
let g:startify_change_to_dir = 0
let g:startify_bookmarks = [ '~/.dotfiles/vim/vimrc.symlink' ]
let g:startify_files_number = 10
let g:startify_enable_special = 0

autocmd FileType startify setlocal nocursorline

" colors
hi StartifyBracket ctermfg=240
hi StartifyFooter  ctermfg=111
hi StartifyHeader  ctermfg=203
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AIRLINE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_theme             = 'powerlineish'
let g:airline_enable_branch     = 1
let g:airline_enable_syntastic  = 1

" vim-powerline symbols
let g:airline_left_sep          = '⮀'
let g:airline_left_alt_sep      = '⮁'
let g:airline_right_sep         = '⮂'
let g:airline_right_alt_sep     = '⮃'
let g:airline_branch_prefix     = '⭠'
let g:airline_readonly_symbol   = '⭤'
let g:airline_linecolumn_prefix = '⭡'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ' '

set noshowmode      " remove the default mode indicator
set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

nmap <leader><tab> :Tabularize /
vmap <leader><tab> :Tabularize /
nmap <leader><S-Tab> :Tabularize /\zs<Left><Left><Left>
vmap <leader><S-Tab> :Tabularize /\zs<Left><Left><Left>

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : ''
\ }
